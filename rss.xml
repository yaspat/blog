<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Maths info en Biwane (BCPST1-A Rennes )</title><link>http://yaspat.github.io/blog/</link><description>Cours de maths pour la classe de BCPST1-A de Rennes</description><atom:link href="http://yaspat.github.io/blog/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>fr</language><lastBuildDate>Sun, 24 Jan 2016 17:06:55 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Informatique : Leçon 7. Recherche dans une chaîne de caractères</title><link>http://yaspat.github.io/blog/posts/lecon-7-recherche-dans-chaine/</link><dc:creator>M. Patel</dc:creator><description>&lt;div&gt;&lt;div class="contents alert alert-info pull-right topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-7-recherche-dans-chaine/#formulation-du-probleme" id="id1"&gt;Formulation du problème&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-7-recherche-dans-chaine/#des-solutions-differentes" id="id2"&gt;Des solutions différentes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-7-recherche-dans-chaine/#approche-1" id="id3"&gt;Approche 1.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-7-recherche-dans-chaine/#approche-2" id="id4"&gt;Approche 2.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-7-recherche-dans-chaine/#approche-3" id="id5"&gt;Approche 3.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-7-recherche-dans-chaine/#quelques-mots-sur-l-interruption-de-boucle" id="id6"&gt;Quelques mots sur l'interruption de boucle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="formulation-du-probleme"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://yaspat.github.io/blog/posts/lecon-7-recherche-dans-chaine/#id1"&gt;Formulation du problème&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Donnée : une chaîne de caractères.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Problème 1.&lt;/strong&gt; je veux savoir si ma chaîne contient un caractère
donné.&lt;/blockquote&gt;
&lt;p&gt;Ce dernier problème est un cas particulier du problème plus général
suivant :&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Problème 2.&lt;/strong&gt; étant donné un tuple (resp. une liste), est-ce qu'un
objet donné figure dans ce tuple (resp. cette liste) ?&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Réponse au problème 1.&lt;/strong&gt; Il y a plusieurs approches à ce problème,
donc on peut proposer différentes solutions. Mettons que je cherche le
caractère &lt;strong&gt;'k'&lt;/strong&gt; dans une chaîne :&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_c9b622fa74f346e3ac4d6a0e2f2aabf5-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;magik&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'iuhfguihguhgmuazhmurohgfzattzaijghaùzjg'&lt;/span&gt; &lt;span class="c"&gt;# Définissons une chaîne&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="des-solutions-differentes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://yaspat.github.io/blog/posts/lecon-7-recherche-dans-chaine/#id2"&gt;Des solutions différentes&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="approche-1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="http://yaspat.github.io/blog/posts/lecon-7-recherche-dans-chaine/#id3"&gt;Approche 1.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;J'utilise une fonction prédéfinie de &lt;strong&gt;Python&lt;/strong&gt; :&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_7512599d367a4c58bb9c627946004a4a-1"&gt;&lt;/a&gt;&lt;span class="s"&gt;'k'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;magik&lt;/span&gt;  &lt;span class="c"&gt;# ne pas confondre nom de variable et contenu&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;
False
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="approche-2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="http://yaspat.github.io/blog/posts/lecon-7-recherche-dans-chaine/#id4"&gt;Approche 2.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Je parcours systématiquement toutes les lettres du mot (j'ai donc une
boucle &lt;strong&gt;for&lt;/strong&gt;). J'initialise un compteur à &lt;span class="math"&gt;\(\mathtt{0}\)&lt;/span&gt; et je
l'incrémente chaque fois que je rencontre le caractère cherché. Ainsi, le
caractère cherché est bien dans la chaîne si et seulement si à la sortie de la boucle
le compteur a une valeur non nulle.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_068b829ba99448f8bee188a6232dc6dc-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;est_dans_chaine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;caractere&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_068b829ba99448f8bee188a6232dc6dc-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_068b829ba99448f8bee188a6232dc6dc-3"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    mot : une chaine de caractère (type str)&lt;/span&gt;
&lt;a name="rest_code_068b829ba99448f8bee188a6232dc6dc-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    k : un caractère (type str)&lt;/span&gt;
&lt;a name="rest_code_068b829ba99448f8bee188a6232dc6dc-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    fonction qui retourne 1 si &amp;lt;k&amp;gt; est dans &amp;lt;mot&amp;gt;,&lt;/span&gt;
&lt;a name="rest_code_068b829ba99448f8bee188a6232dc6dc-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    et 0 sinon.&lt;/span&gt;
&lt;a name="rest_code_068b829ba99448f8bee188a6232dc6dc-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_068b829ba99448f8bee188a6232dc6dc-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;compteur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_068b829ba99448f8bee188a6232dc6dc-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                   &lt;span class="c"&gt;# on peut faire des boucles sur&lt;/span&gt;
&lt;a name="rest_code_068b829ba99448f8bee188a6232dc6dc-10"&gt;&lt;/a&gt;                                    &lt;span class="c"&gt;# les caractères d'une chaîne :&lt;/span&gt;
&lt;a name="rest_code_068b829ba99448f8bee188a6232dc6dc-11"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;caractere&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="c"&gt;# k prend successivement comme&lt;/span&gt;
&lt;a name="rest_code_068b829ba99448f8bee188a6232dc6dc-12"&gt;&lt;/a&gt;                                   &lt;span class="c"&gt;# valeur chaque caractère se trouvant&lt;/span&gt;
&lt;a name="rest_code_068b829ba99448f8bee188a6232dc6dc-13"&gt;&lt;/a&gt;                &lt;span class="n"&gt;compteur&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="c"&gt;# dans la chaîne &amp;lt;mot&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_068b829ba99448f8bee188a6232dc6dc-14"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;compteur&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_068b829ba99448f8bee188a6232dc6dc-15"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_068b829ba99448f8bee188a6232dc6dc-16"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_068b829ba99448f8bee188a6232dc6dc-17"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_64f9022c4b754437b6a2eb3de110641e-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;est_dans_chaine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;magik&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# ne pas confondre nom de variable et contenu&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;
0
&lt;/pre&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_bdea2bd39c774c4d88229d65d8282203-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;est_dans_chaine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'goldorak'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;
1
&lt;/pre&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_550d335e77954eaebedb25e58df07bfe-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;est_dans_chaine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'tchoupi'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;
0
&lt;/pre&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_a0dc1d4aef0c46cb9bc66b97620ff31e-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;est_dans_chaine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'goldorakkkkkkkkkkkk'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;
1
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="approche-3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="http://yaspat.github.io/blog/posts/lecon-7-recherche-dans-chaine/#id5"&gt;Approche 3.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Je parcours les lettres du mot et je m'arrête quand j'ai soit rencontré
le caractère que je cherche soit quand j'ai parcouru toutes lettres.
(j'ai donc une boucle &lt;strong&gt;while&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Boucle &lt;strong&gt;while&lt;/strong&gt; : je dois examiner la condition de sortie. On arrête la
boucle quand :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;ou bien on a rencontré le caractère cherché.&lt;/li&gt;
&lt;li&gt;ou bien on a examiné tous les caractères sans succès.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Puisque la condition d'arrêt contient un "ou", la condition &lt;strong&gt;while&lt;/strong&gt;
contient un &lt;strong&gt;et&lt;/strong&gt;. Ce qui donne :&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;est_dans_chaine3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;caractere&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-3"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    mot : une chaine de caractère (type str)&lt;/span&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    caractere : un caractère (type str)&lt;/span&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    fonction qui retourne 1 si &amp;lt;caractere&amp;gt; est dans &amp;lt;mot&amp;gt;, et 0 sinon,&lt;/span&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    en suivant l'approche 3.&lt;/span&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;reponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c"&gt;# sera actualisée et retournée en sortie&lt;/span&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# donne  le nb. de caractères dans &amp;lt;mot&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;         &lt;span class="c"&gt;# je commence par examiner le 1er caractère&lt;/span&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-12"&gt;&lt;/a&gt;    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;mot&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;caractere&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-13"&gt;&lt;/a&gt;        &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c"&gt;# on passe au caractère suivant&lt;/span&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt;  &lt;span class="n"&gt;mot&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;caractere&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c"&gt;# j'examine la lettre qui a&lt;/span&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-16"&gt;&lt;/a&gt;                           &lt;span class="c"&gt;# provoqué la sortie de boucle&lt;/span&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;reponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-19"&gt;&lt;/a&gt;        &lt;span class="n"&gt;reponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_cfbc18072a2644abadb47471952d365a-20"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reponse&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_3ee2133ad44c4f99b6386806117b8107-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;est_dans_chaine3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'toti'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'i'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;
1
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Remarque.&lt;/strong&gt; &lt;strong&gt;Python&lt;/strong&gt; fait de l'évaluation paresseuse : quand il
calcule la valeur de l'assertion :&lt;span class="math"&gt;\([A\)&lt;/span&gt; &lt;strong&gt;et&lt;/strong&gt; &lt;span class="math"&gt;\(B]\)&lt;/span&gt;, dès lors
que &lt;span class="math"&gt;\(A\)&lt;/span&gt; est faux, il retourne &lt;strong&gt;faux&lt;/strong&gt; sans chercher à savoir la
valeur de &lt;span class="math"&gt;\(B\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="quelques-mots-sur-l-interruption-de-boucle"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://yaspat.github.io/blog/posts/lecon-7-recherche-dans-chaine/#id6"&gt;Quelques mots sur l'interruption de boucle&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On pourrait parler de l'interruption du flot d'instructions en général.&lt;/p&gt;
&lt;p&gt;Ces techniques d'interruptions dans les boucles servent typiquement dans
le cas où on sait &lt;strong&gt;au plus&lt;/strong&gt; combien d'itérations faire dans la boucle.
C'est particulièrement adpaté ici, puisque quand on cherche un caractère
dans un mot, on sait qu'on aura au plus &lt;span class="math"&gt;\(n\)&lt;/span&gt; examens à faire, où
&lt;span class="math"&gt;\(n=\)&lt;/span&gt; la longueur du mot.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intérêt :&lt;/strong&gt; évite la programmation d'un &lt;strong&gt;while&lt;/strong&gt; si on sait qu'on ne
dépassera pas un nombre d'itérations donné.&lt;/p&gt;
&lt;p&gt;En pratique, on construit une boucle &lt;strong&gt;for&lt;/strong&gt; qu'on interrompt si la
condition souhaitée est réalisée :&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_853be3845617496e98409aedf8691165-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;est_dans_chaine4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;caractere&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_853be3845617496e98409aedf8691165-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_853be3845617496e98409aedf8691165-3"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    mot : une chaine de caractère (type str)&lt;/span&gt;
&lt;a name="rest_code_853be3845617496e98409aedf8691165-4"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    caractere : un caractère (type str)&lt;/span&gt;
&lt;a name="rest_code_853be3845617496e98409aedf8691165-5"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    fonction qui retourne 1 si &amp;lt;caractere&amp;gt; est dans &amp;lt;mot&amp;gt;,&lt;/span&gt;
&lt;a name="rest_code_853be3845617496e98409aedf8691165-6"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    0 sinon. Repose sur l' interruption d'une boucle for.&lt;/span&gt;
&lt;a name="rest_code_853be3845617496e98409aedf8691165-7"&gt;&lt;/a&gt;&lt;span class="sd"&gt;    """&lt;/span&gt;
&lt;a name="rest_code_853be3845617496e98409aedf8691165-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_853be3845617496e98409aedf8691165-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;reponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_853be3845617496e98409aedf8691165-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;lettre&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c"&gt;# on peut itérer sur les caractères&lt;/span&gt;
&lt;a name="rest_code_853be3845617496e98409aedf8691165-11"&gt;&lt;/a&gt;                       &lt;span class="c"&gt;# d'une chaîne.&lt;/span&gt;
&lt;a name="rest_code_853be3845617496e98409aedf8691165-12"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lettre&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;caractere&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_853be3845617496e98409aedf8691165-13"&gt;&lt;/a&gt;            &lt;span class="n"&gt;reponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_853be3845617496e98409aedf8691165-14"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="c"&gt;#si le if est réalisé,j'interromps la boucle&lt;/span&gt;
&lt;a name="rest_code_853be3845617496e98409aedf8691165-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reponse&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_34a88088ee4d4fcaaec5efadc93f5707-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;est_dans_chaine4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'toti'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'o'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;
1
&lt;/pre&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_a451eee7b28d4b65a46cf441bb55dd45-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;est_dans_chaine4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'toti'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'i'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;
1
&lt;/pre&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ba198814646a41cabaa2a37776fa6ca7-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;est_dans_chaine4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'toti'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;
0
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Remarque.&lt;/strong&gt; On a vu aussi qu'un &lt;strong&gt;return&lt;/strong&gt; termine l'exécution d'une
fonction. Dans ce contexte, on peut interrompre la boucle par un
&lt;strong&gt;return&lt;/strong&gt; de la manière suivante :&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_83b7cf92c9fd4e11bd888892204e9478-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;est_dans_chaine5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;caractere&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_83b7cf92c9fd4e11bd888892204e9478-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;lettre&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c"&gt;# on peut itérer sur les caractères d'une chaîne.&lt;/span&gt;
&lt;a name="rest_code_83b7cf92c9fd4e11bd888892204e9478-3"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lettre&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;caractere&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_83b7cf92c9fd4e11bd888892204e9478-4"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_83b7cf92c9fd4e11bd888892204e9478-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_4db34c58b3174eb9b46382119c65237f-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;est_dans_chaine5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'toti'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'i'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;
1
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Exercice&lt;/strong&gt; (&lt;em&gt;répond au problème 2&lt;/em&gt;). Progammer une fonction
&lt;strong&gt;est_dans_liste(ma_liste,objet)&lt;/strong&gt; qui prend en entrée une liste
&lt;strong&gt;ma_liste&lt;/strong&gt;, un item &lt;strong&gt;objet&lt;/strong&gt; quelconque et qui retourne &lt;strong&gt;1&lt;/strong&gt; si
&lt;strong&gt;objet&lt;/strong&gt; est dans &lt;strong&gt;ma_liste&lt;/strong&gt;, et &lt;strong&gt;0&lt;/strong&gt; sinon.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_325d70653fe34e84aec8e473ad1c3e7a-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;est_dans_liste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ma_liste&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;objet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_325d70653fe34e84aec8e473ad1c3e7a-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ma_liste&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_325d70653fe34e84aec8e473ad1c3e7a-3"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;objet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_325d70653fe34e84aec8e473ad1c3e7a-4"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_325d70653fe34e84aec8e473ad1c3e7a-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_2a4093a62d9f42caaa20fbbe04f45d18-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;545&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'toto'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_2a4093a62d9f42caaa20fbbe04f45d18-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;est_dans_liste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#54 ne figure pas en tant qu'item de L !&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;
0
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Exercice&lt;/strong&gt; Améliorer le programme précédent pour que la fonction
retourne (le cas échéant) le premier indice &lt;strong&gt;i&lt;/strong&gt; où se trouve &lt;strong&gt;objet&lt;/strong&gt;
dans &lt;strong&gt;ma_liste&lt;/strong&gt;, sinon &lt;strong&gt;-1&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_92bbdb6c90d54b21b6c232e5c7176cf1-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;position_dans_liste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ma_liste&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;objet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_92bbdb6c90d54b21b6c232e5c7176cf1-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_92bbdb6c90d54b21b6c232e5c7176cf1-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ma_liste&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_92bbdb6c90d54b21b6c232e5c7176cf1-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;objet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_92bbdb6c90d54b21b6c232e5c7176cf1-5"&gt;&lt;/a&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;a name="rest_code_92bbdb6c90d54b21b6c232e5c7176cf1-6"&gt;&lt;/a&gt;        &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_92bbdb6c90d54b21b6c232e5c7176cf1-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_bb1512927c834b06b1c17271086b6595-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;position_dans_liste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'toto'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="literal-block"&gt;
2
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>chaînes de caractères</category><category>informatique</category><category>python</category><guid>http://yaspat.github.io/blog/posts/lecon-7-recherche-dans-chaine/</guid><pubDate>Sun, 24 Jan 2016 11:36:59 GMT</pubDate></item><item><title>Informatique : Leçon 6. Tuples  - Listes</title><link>http://yaspat.github.io/blog/posts/lecon-6-tuples-listes/</link><dc:creator>M. Patel</dc:creator><description>&lt;div&gt;&lt;div class="contents alert alert-info pull-right topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-6-tuples-listes/#c-est-quoi-un-tuple" id="id1"&gt;C'est quoi un tuple ?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-6-tuples-listes/#premiers-exemples" id="id2"&gt;Premiers exemples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-6-tuples-listes/#nombre-d-items-d-un-tuple" id="id3"&gt;Nombre d'items d'un tuple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-6-tuples-listes/#acces-aux-items-d-un-tuple" id="id4"&gt;Accès aux items d'un tuple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-6-tuples-listes/#une-utilisation-interessante-des-tuples-echange-de-variables" id="id5"&gt;Une utilisation intéressante des tuples : échange de variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-6-tuples-listes/#les-tuples-ne-sont-pas-mutables" id="id6"&gt;Les tuples ne sont pas mutables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-6-tuples-listes/#un-autre-type-voisin-des-tuples-les-listes" id="id7"&gt;Un autre type voisin des tuples : les listes.&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-6-tuples-listes/#exemple" id="id8"&gt;Exemple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-6-tuples-listes/#operations" id="id9"&gt;Opérations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-6-tuples-listes/#les-listes-sont-mutables" id="id10"&gt;Les listes sont mutables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-6-tuples-listes/#petite-digression-sur-les-mots-et-les-listes" id="id11"&gt;Petite digression sur les mots et les listes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="c-est-quoi-un-tuple"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://yaspat.github.io/blog/posts/lecon-6-tuples-listes/#id1"&gt;C'est quoi un tuple ?&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;C'est un nouveau type d'objets. Il correspond en maths, aux
&lt;span class="math"&gt;\(p\)&lt;/span&gt;-listes ou &lt;span class="math"&gt;\(p\)&lt;/span&gt;-upplets : suites ordonnées de &lt;span class="math"&gt;\(p\)&lt;/span&gt;
objets.&lt;/li&gt;
&lt;li&gt;En &lt;strong&gt;Python&lt;/strong&gt;, les tuples sont délimités, comme en maths, par des
parenthèses.&lt;/li&gt;
&lt;li&gt;En maths, les éléments d'un &lt;span class="math"&gt;\(p\)&lt;/span&gt;-upplet s'appellent les
&lt;em&gt;coordonnées&lt;/em&gt; ou les &lt;em&gt;composantes&lt;/em&gt; du &lt;span class="math"&gt;\(p\)&lt;/span&gt;-upplet. En
&lt;strong&gt;Python&lt;/strong&gt;, les éléments d'un tuple sont appelés les &lt;em&gt;items&lt;/em&gt; du
tuple. Ils sont séparés par des virgules, comme en maths.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="http://yaspat.github.io/blog/posts/lecon-6-tuples-listes/"&gt;Lire la suite…&lt;/a&gt; (Il reste encore 6 min. de lecture)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>chaînes de caractères</category><category>informatique</category><category>listes</category><category>python</category><category>tuples</category><guid>http://yaspat.github.io/blog/posts/lecon-6-tuples-listes/</guid><pubDate>Thu, 17 Dec 2015 20:36:59 GMT</pubDate></item><item><title>Avez-vous remarqué cette nouvelle icône ?</title><link>http://yaspat.github.io/blog/posts/as-tu-remarque-cette-nouvelle-icone/</link><dc:creator>M. Patel</dc:creator><description>&lt;p&gt;Si vous reagardez dans la barre latérale, vous verrez une icône de video  permettant  d' aller vers des &lt;em&gt;animathions&lt;/em&gt;. C'est quoi une
&lt;em&gt;animathion&lt;/em&gt; ? Allez voir !&lt;/p&gt;</description><category>animathions</category><category>video</category><guid>http://yaspat.github.io/blog/posts/as-tu-remarque-cette-nouvelle-icone/</guid><pubDate>Mon, 14 Dec 2015 11:59:21 GMT</pubDate></item><item><title>Des biomorphes dans le plan complexe</title><link>http://yaspat.github.io/blog/posts/biomorphes/</link><dc:creator>M. Patel</dc:creator><description>&lt;div&gt;&lt;blockquote&gt;
&lt;em&gt;Sometimes I consider myself as a fisherman. Computer programs and
ideas are my hooks, rods and reels. Computer pictures are the
trophies and delicious meals.&lt;/em&gt;&lt;/blockquote&gt;
&lt;p&gt;Dans les années 80, par une erreur de programmation, Clifford Pickover,
ingénieur chez IBM, a découvert accidentellement d'étranges organismes
habitant le plan complexe.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://yaspat.github.io/blog/posts/biomorphes/"&gt;Lire la suite…&lt;/a&gt; (Il reste encore 8 min. de lecture)&lt;/p&gt;&lt;/div&gt;</description><category>complexes</category><category>python</category><guid>http://yaspat.github.io/blog/posts/biomorphes/</guid><pubDate>Tue, 08 Dec 2015 11:39:19 GMT</pubDate></item><item><title>Informatique : Leçon 5. Boucles tant que</title><link>http://yaspat.github.io/blog/posts/lecon-5-boucles-tant-que/</link><dc:creator>M. Patel</dc:creator><description>&lt;div&gt;&lt;div class="contents alert alert-info pull-right topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-5-boucles-tant-que/#principe-de-la-boucle-tant-que" id="id1"&gt;Principe de la boucle tant que&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-5-boucles-tant-que/#trois-recommandations-pour-la-construction-d-une-boucle-tant-que" id="id2"&gt;Trois recommandations pour la construction d'une boucle tant que&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-5-boucles-tant-que/#premier-exercice-d-apres-poly-exemple-5-p-34" id="id3"&gt;Premier exercice (d'après poly exemple 5 p.34)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-5-boucles-tant-que/#la-fameuse-suite-de-syracuse" id="id4"&gt;La fameuse suite de Syracuse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-5-boucles-tant-que/#combien-de-temps-dure-le-vol" id="id5"&gt;Combien de temps dure le vol ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/lecon-5-boucles-tant-que/#quel-est-le-premier-vol-dont-la-duree-est-111" id="id6"&gt;Quel est le premier vol dont la durée est 111 ?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="principe-de-la-boucle-tant-que"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://yaspat.github.io/blog/posts/lecon-5-boucles-tant-que/#id1"&gt;Principe de la boucle tant que&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;les boucles &lt;strong&gt;tant que&lt;/strong&gt; réalisent aussi des processus itératifs.
Tputefois, à la différence des boucles &lt;strong&gt;pour&lt;/strong&gt;, &lt;em&gt;le nombre d'itérations
n'est pas connu à l'avance, ce qui fait que la sortie de boucle est
soumise à un&lt;/em&gt; &lt;strong&gt;test booléen&lt;/strong&gt;. Cette condition constitue le &lt;em&gt;test
d'arrêt&lt;/em&gt; de la boucle.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://yaspat.github.io/blog/posts/lecon-5-boucles-tant-que/"&gt;Lire la suite…&lt;/a&gt; (Il reste encore 6 min. de lecture)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>boucle</category><category>informatique</category><category>python</category><category>syracuse</category><category>while</category><guid>http://yaspat.github.io/blog/posts/lecon-5-boucles-tant-que/</guid><pubDate>Tue, 01 Dec 2015 20:36:59 GMT</pubDate></item><item><title>Géométrie d'une EDL1</title><link>http://yaspat.github.io/blog/posts/euler1/</link><dc:creator>M. Patel</dc:creator><description>&lt;div&gt;&lt;div class="contents alert alert-info pull-right topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/euler1/#une-image-pour-commencer" id="id1"&gt;Une image pour commencer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/euler1/#une-edl1-c-est-du-vent" id="id2"&gt;Une EDL1, c'est du vent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/euler1/#trois-resultats-de-maths-a-savoir-avant" id="id3"&gt;Trois résultats de maths à savoir avant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/euler1/#mais-revenons-a-l-equation-differentielle" id="id4"&gt;Mais revenons à l'équation différentielle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/euler1/#au-milieu-d-un-champ-de-fleches" id="id5"&gt;Au milieu d'un champ de flèches&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="une-image-pour-commencer"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://yaspat.github.io/blog/posts/euler1/#id1"&gt;Une image pour commencer&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Je vais partir de l'image suivante : imagine, Biwane, que tu es un grain
de pollen qui se laisse mouvoir au gré des vents. Pour t'aider, je te
mets dans le contexte : tu voles au dessus des côtes californiennes.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://yaspat.github.io/blog/posts/euler1/"&gt;Lire la suite…&lt;/a&gt; (Il reste encore 6 min. de lecture)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>champ de vecteurs</category><category>équations différentielles</category><guid>http://yaspat.github.io/blog/posts/euler1/</guid><pubDate>Tue, 24 Nov 2015 11:39:19 GMT</pubDate></item><item><title>Informatique : Leçon 4</title><link>http://yaspat.github.io/blog/posts/Boucles Pour/</link><dc:creator>M. Patel</dc:creator><description>&lt;div&gt;&lt;div class="contents alert alert-info pull-right topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/Boucles%20Pour/#exemples-de-boucles-pour" id="id1"&gt;Exemples de boucles pour&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/Boucles%20Pour/#exemple-1" id="id2"&gt;Exemple 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/Boucles%20Pour/#exemple-2" id="id3"&gt;Exemple 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/Boucles%20Pour/#variante-de-l-exemple-2" id="id4"&gt;Variante de l'exemple 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/Boucles%20Pour/#encore-une-amelioration-supplementaire" id="id5"&gt;Encore une amélioration supplémentaire&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/Boucles%20Pour/#exercice-18-p-27-du-poly" id="id6"&gt;Exercice 18 p. 27 du poly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/Boucles%20Pour/#exercice-19-p-27" id="id7"&gt;Exercice 19 p.27&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/Boucles%20Pour/#exercice-20-p-28-calcul-de-n" id="id8"&gt;Exercice 20 p.28 : calcul de &lt;span class="math"&gt;\(n!\)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/Boucles%20Pour/#dernier-exercice" id="id9"&gt;Dernier exercice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Les boucles servent à automatiser la répétition de tâches. Il y a
essentiellement deux types de boucles :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Celles pour lesquelles &lt;em&gt;on sait à l'avance&lt;/em&gt; le nombre d'itérations
(ou répétitions) à effectuer : ce sont les boucles &lt;strong&gt;for&lt;/strong&gt;. Par
exemple : calculer les 100 premiers termes d'une suite &lt;span class="math"&gt;\((u_n)\)&lt;/span&gt;
donnée.&lt;/li&gt;
&lt;li&gt;Celles pour lesquelles &lt;em&gt;on ne sait pas à l'avance&lt;/em&gt; le nombre
d'itérations à effectuer : ce sont des boucles subordonnées à un
&lt;em&gt;test d'arrêt&lt;/em&gt; : les boucles &lt;strong&gt;tant que&lt;/strong&gt;. Par exemple : trouver le
premier terme d'une suite &lt;span class="math"&gt;\((u_n)\)&lt;/span&gt; donnée de limite
&lt;span class="math"&gt;\(+\infty\)&lt;/span&gt; vérifiant &lt;span class="math"&gt;\(u_n &amp;gt; 10000\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="http://yaspat.github.io/blog/posts/Boucles%20Pour/"&gt;Lire la suite…&lt;/a&gt; (Il reste encore 7 min. de lecture)&lt;/p&gt;&lt;/div&gt;</description><category>boucles</category><category>for</category><category>leçon</category><category>python</category><guid>http://yaspat.github.io/blog/posts/Boucles Pour/</guid><pubDate>Wed, 04 Nov 2015 11:39:19 GMT</pubDate></item><item><title>Photos de vacances</title><link>http://yaspat.github.io/blog/posts/photos-de-vacances/</link><dc:creator>M. Patel</dc:creator><description>&lt;div&gt;&lt;p&gt;Si vous voulez comprendre le propos de ce billet, il faut avoir lu  &lt;a class="reference external" href="/blog/posts/eq2deg/"&gt;le précédent&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Je suis allé me ballader dans la vallée des hippocampes, du coup je vous ai ramené des photos (cliquez dessus pour les agrandir).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://yaspat.github.io/blog/posts/photos-de-vacances/"&gt;Lire la suite…&lt;/a&gt; (Il reste encore 1 min. de lecture)&lt;/p&gt;&lt;/div&gt;</description><category>fractales</category><category>images</category><category>mandelbrot</category><guid>http://yaspat.github.io/blog/posts/photos-de-vacances/</guid><pubDate>Sun, 18 Oct 2015 20:15:09 GMT</pubDate></item><item><title>Des trinômes et des hippocampes</title><link>http://yaspat.github.io/blog/posts/eq2deg/</link><dc:creator>M. Patel</dc:creator><description>&lt;div&gt;&lt;div class="contents alert alert-info pull-right topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/eq2deg/#des-germes-et-des-trajectoires" id="id1"&gt;Des germes et des trajectoires&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/eq2deg/#un-premier-exemple" id="id2"&gt;Un premier exemple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/eq2deg/#un-deuxieme-exemple" id="id3"&gt;Un deuxième exemple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/eq2deg/#un-dernier-exemple" id="id4"&gt;Un dernier exemple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/eq2deg/#quel-age-a-ce-germe" id="id5"&gt;Quel âge a ce germe ?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/eq2deg/#colorions-les-germes-de-meme-age" id="id6"&gt;Colorions les germes de même âge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://yaspat.github.io/blog/posts/eq2deg/#vous-avez-dit-fractales" id="id7"&gt;Vous avez dit fractales ?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Ce qui est vraiment fascinant avec les maths, c'est que quand on croit
qu'on a fait le tour d'une question, on peut toujours lui trouver une
face par laquelle on ne l'a pas regardée. Et ça peut donner des points
de vue incroyables. Je vais prendre un exemple qui peut paraître blasant
: l'équation du second degré.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://yaspat.github.io/blog/posts/eq2deg/"&gt;Lire la suite…&lt;/a&gt; (Il reste encore 7 min. de lecture)&lt;/p&gt;&lt;/div&gt;</description><category>fractales</category><category>mandelbrot</category><category>suites</category><guid>http://yaspat.github.io/blog/posts/eq2deg/</guid><pubDate>Sun, 18 Oct 2015 11:39:19 GMT</pubDate></item><item><title>Méditations pythoniques pour typo-déficients</title><link>http://yaspat.github.io/blog/posts/meditations-typo-deficient/</link><dc:creator>M. Patel</dc:creator><description>&lt;div&gt;&lt;p&gt;L'image de machine qu'on a donné d'une fonction dans le cours de
mathématiques se prête aux fonctions en &lt;strong&gt;Python&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://yaspat.github.io/blog/posts/meditations-typo-deficient/"&gt;Lire la suite…&lt;/a&gt; (Il reste encore 2 min. de lecture)&lt;/p&gt;&lt;/div&gt;</description><category>fonction</category><category>type</category><guid>http://yaspat.github.io/blog/posts/meditations-typo-deficient/</guid><pubDate>Thu, 08 Oct 2015 21:59:34 GMT</pubDate></item></channel></rss>